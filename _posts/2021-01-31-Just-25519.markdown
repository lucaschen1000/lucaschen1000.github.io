---
layout: post
title:  "25519 from Just CTF 2021"
---

I solved 25519 during the competition :) Migrated this post from the hackmd ntropy writeups as I'm proud of this writeup.

## 25519

We're given task.sage.

#### **`task.sage`**
```python
#!/usr/bin/env sage

from sys import exit
from hashlib import sha256


FLAG = open('./flag.txt').read()

ec = EllipticCurve(GF(2**255-19), [0, 486662, 0, 1, 0])
p = ec.order()
ZmodP = Zmod(p)
G = ec.lift_x(9)

ha = lambda x: x if isinstance(x, int) or isinstance(x, Integer) else product(x.xy())
hashs = lambda *x: int.from_bytes(sha256(b'.'.join([b'%X' % ha(x) for x in x])).digest(), 'little') % p


def hashp(x):
    x = hashs((x))
    while True:
        try:
            return ec.lift_x(x)
        except:
            x = hashs((x))


def keygen():
    x = randint(1, p-1)
    P = x * G
    return x, P


def verify(signature, P, m):
    I, e, s = signature
    return e == hashs(m, s*G + e*P, s*hashp(P) + e*I)


if __name__ == "__main__":
    x, P = keygen()
    m = randint(1, p-1)
    print(x, P, m)

    spent = set()
    for i in range(8):
        Ix = int(input('I (x): '))
        Iy = int(input('I (y): '))
        I = ec(Ix, Iy)
        e = int(input('e: '))
        s = int(input('s: '))
        if verify((I, e, s), P, m) and I not in spent:
            print('ok')
            spent.add(I)
        else:
            print('nope')
            exit(1)

    print(FLAG)
```

We are given

* $$ x\in [1, p-1] $$
* $$G = \textrm{Generator of the curve } y^{2} = x^{3} + 486662x^{2} + x \pmod {2^{255} - 19}$$
* $$P = xG$$
* $$m\in [1, p-1]$$

and we need to find at least 8 triplets of ($$I = (I_x, I_y)$$, $$e$$, $$s$$) with unique $$I$$ such that $$e = H_s(m, sG+eP, sH_p(P) + eI)$$, where $$H_s$$ and $$H_p$$ are arbitrary hash functions. $$H_s$$ takes in an arbitrary number of parameters and returns an integer while $$H_p$$ takes in an integer and return a point on the elliptic curve.

Because we cannot reverse a hash function, this almost seems impossible! $$e$$ is on both sides of the equation. However, if we're able to find values $$I_x$$, $$I_y$$, and $$s$$ such that $$sG+eP$$ and $$sH_p(P) + eI$$ do not rely on $$e$$, we can predetermine the value of $$e$$.

I can get somewhere by setting $$P=xG$$ in $$sG + eP$$, thus getting $$(s+ex)G$$. If I set $$s = -ex$$, the resulting expression $$(-ex+ex)G=(0, 1, 0)$$ does not rely on $$e$$! However, that is the infinity point which an xy coordinate cannot be determined from, so replacing $$s=-ex$$ with $$s=1-ex$$ resolves $$(s+ex)G$$ to $$G$$. If $$s=1-ex$$, then the second expression $$sH_p(P) + eI$$ resolves to $$(1-ex)H_p(P) + eI$$, so to get rid of $$e$$, $$I$$ must be $$xH_p(P)$$. We found a solution to the verification function!

However, setting $$s=2-ex$$ will not affect $$I$$, so I had to be smarter about how to change the value of I while still rendering $$e$$ useless in the expressions. I was stuck at this point for the longest time and then came up with the resulting algorithm.

* $$i = \{\text{First eight integers with modular inverse modulo p}\}$$
* $$e = H_s(m, G, H_p(P)\cdot(1+i))$$
* $$I = i(x + e^{-1})H_p(P) \pmod {p}$$
* $$s = (1-ex) \pmod{p}$$

I had the epiphany to use $$e$$ in $$I$$. Let's see how this works. Say $$i$$ were $$0$$. Then with $$s=(1-ex) \pmod{p}$$ and $$I = (x+e^{-1})H_{p}$$, $$(s+ex)G = G$$ and $$sH_p(P) + eI = (1-ex)H_p(P) + e(e^{-1}+x)H_p = 2H_{p}$$. The resulting expressions don't have $$e$$!

My solution is below.

```py
import os
os.environ["PWNLIB_NOTERM"] = "true"

from task import *
from pwn import *

if __name__ == "__main__":
    r = remote("c25519.nc.jctf.pro", "1337")
    # r = process("./task.sage")

    x = int(r.recvuntil(" ")[:-1])
    P = x * G
    r.recvuntil(") ")
    m = int(r.recvuntil("\n")[:-1])

    print(x, P, m)
    
    i = 1
    for _ in range(1, 9):
        e = hashs(m, G, hashp(P) * (1+i))
        while gcd(e, p) != 1:
            i += 1
            e = hashs(m, G, hashp(P) * (1+i))
        print(i)
        I = (x + int(ZmodP(e^-1))*i) * hashp(P)
        Ix, Iy = I.xy()
        s = (1 - e*x) % p
        assert ha(s * hashp(P) + e * I) == ha(hashp(P) * (1+i))
        assert ha(s*G + e*P) == ha(G)

        r.sendline(str(Ix))
        r.sendline(str(Iy))
        r.sendline(str(e))
        r.sendline(str(s))
        print(r.recv(4096))
        i += 1
    
    r.interactive()
```
